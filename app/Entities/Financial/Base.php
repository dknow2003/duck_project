<?php

namespace App\Entities\Financial;

use App\Server;
use Carbon\Carbon;
use DateInterval;
use DatePeriod;
use DateTimeZone;
use DB;
use Illuminate\Database\Eloquent\Model;

class Base extends Model
{
    /**
     * 管理员为用户设置的默认数据库。
     *
     * @var array
     */
    protected static $defaultConnections = [];

    /**
     * 默认的数据库额外配置。
     *
     * @var array
     */
    protected static $defaultConfig = [];

    /**
     * 默认连接服务器的所需配置。
     *
     */
    protected static $server;

    /**
     * Create a new Eloquent model instance.
     *
     * @param \App\Server $server
     * @param  array      $attributes
     *
     */
    public function __construct(array $attributes = [])
    {
        parent::__construct($attributes);
        static::boot();
    }

    /**
     * The "booting" method of the model.
     *
     * @return void
     */
    protected static function boot()
    {
        // 应用充值服务器设置
        if (!static::$server) {
            static::applyUserSettingConnections();
        } else {
            static::applyCronSettingConnections();
        }
        static::checkCalendar();
        parent::boot(); // TODO: Change the autogenerated stub
    }

    private static function applyUserSettingConnections()
    {
        $databases = static::getDefaultConnections();
        $defaultConfig = static::getDefaultConfig();
        $config = array_merge($defaultConfig, $databases[2]);
        $config['password'] = $config['pwd'];
        app()['config']->set('database.connections.financial-default', $config);
        app()['config']->set('database.default', 'financial-default');
    }

    private static function applyCronSettingConnections()
    {
        $databases = static::$server->connections;
        $defaultConfig = static::getDefaultConfig();
        $config = array_merge($defaultConfig, $databases[2]);
        $configName = "financial-default-" . static::$server->id;
        app()['config']->set("database.connections.{$configName}", $config);
        app()['config']->set('database.default', $configName);
    }

    public static function getDefaultConnections($cron = false)
    {
        return static::$defaultConnections ?:
            (static::$defaultConnections = static::getDefaultConnectionsOrFirst());
    }

    public static function setServer(Server $server)
    {
        static::$server = $server;
        return new static;
    }

    /**
     * User use
     *
     * @return mixed
     */
    private static function getDefaultConnectionsOrFirst()
    {
        $user = \Auth::user();
        $server = $user->selected_server
            ? Server::where('id', $user->selected_server)->first()
            : false;

        return $server ? $server->connections : Server::first()->connections;
    }

    /**
     * @return mixed
     */
    private static function getDefaultConfig()
    {
        return static::$defaultConfig ?: app('config')->get('database.connections.financial-default');
    }

    private static function checkCalendar()
    {
        static $exists = false;
        $exists = $exists ?: static::getConnectionResolver()->connection('financial-default')->getSchemaBuilder()->hasTable('admin_calendar');
        if (!$exists && !static::$server) {
            $createStatement = <<<SQL
            CREATE TABLE `admin_calendar` (
              `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
              `date` date NOT NULL COMMENT '日期',
              PRIMARY KEY (`id`),
              UNIQUE KEY `calendar_date_unique` (`date`)
            ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci COMMENT='日历视图防止统计信息残缺日期' ;
SQL;
            \DB::connection('financial-default')->statement($createStatement);
            //生成天数
            $tz = new DateTimeZone('Asia/Chongqing');
            $from = Carbon::createFromDate(2016, 1, 1, $tz);
            $to = Carbon::createFromDate(2017, 12, 31, $tz);
            $interval = new DateInterval('P1D');
            $to->add($interval);
            $daterange = new DatePeriod($from, $interval, $to);

            foreach ($daterange as $date) {
                Calendar::updateOrCreate([
                    'date' => $date->format('Y-m-d')
                ]);
            }
            $exists = true;
        }
    }
}
